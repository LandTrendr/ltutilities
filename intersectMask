#!/usr/bin/env python

'''
Intersect Mask.

Usage:
  intersectMask <source> <mask> <output> [--src_band=<sb>] [--msk_band=<mb>] [--msk_value=<mv>] [--out_value=<ov>] [--meta=<m>]
  intersectMask -h | --help

Options:
  -h --help     	  Show this screen.
  --src_band=<sb>  	  Band of source file - can be an integer, a list of bands, or "ALL" to mask all bands [default: 1].
  --msk_band=<mb>  	  Band of mask file [default: 1].
  --msk_value=<mv>    Value of mask for pixels to be turned on in source.
  --out_value=<ov>    Value of masked pixels in output to turn into (instead of 0) - use to discern between nodata & 0 pixels.
  --meta=<meta>  	  Additional notes for meta.txt file.
'''

from lthacks.intersectMask import *
from lthacks.lthacks import *
import docopt

def main(sourcePath, maskPath, outPath, src_band, msk_band, msk_value, out_value, note):

    if type(src_band) is int:
        loop = False
        outBandArray, transform, projection, driver, nodata, datatype = maskAsArray(sourcePath, maskPath, src_band=src_band, msk_band=msk_band, msk_value=msk_value, out_value=out_value)
        saveArrayAsRaster(outBandArray, transform, projection, driver, outPath, datatype, nodata=nodata)
    
    elif type(src_band) is list:
    	bands = src_band
    	loop = True

    else:
        #count bands if "ALL" indicated
        src = gdal.Open(sourcePath, GA_ReadOnly)
        numbands = src.RasterCount
        bands = range(1, numbands+1)
        loop = True

	#loop through bands & mask as array
	if loop:
		outbands = []
		for band in bands:
			outBandArray, transform, projection, driver, nodata, datatype = maskAsArray(sourcePath, 
			maskPath, src_band=band, msk_band=msk_band, msk_value=msk_value, out_value=out_value)
			
			outbands.append(outBandArray)

		#save all bands as one raster
		saveArrayAsRaster_multiband(outbands, transform, projection, driver, outPath, datatype, nodata=nodata)
        
    #write _meta.txt file
    createMetadata(sys.argv, outPath, description=note, lastCommit=getLastCommit(__file__))


if __name__ == '__main__':

    try:
        #parse arguments, use file docstring as parameter definition
        args = docopt.docopt(__doc__)

        if args['--msk_value']:
            msk_value = int(args['--msk_value'])
        else:
            msk_value = None
            
        if args['--out_value']:
            out_value = int(args['--out_value'])
        else:
            out_value = None

        try: 
            src_band = int(args['--src_band'])
        except:
            try: 
                if args['--src_band'].strip().upper() == "ALL":
                    src_band = "ALL"
                elif "," in args['--src_band']:
                	src_band = [int(i) for i in args['--src_band'].strip().split(",")]
                else:
                	sys.exit("--src_band entry not valid: ",  args['--src_band'])
            except:
                sys.exit("--src_band entry not valid: ",  args['--src_band'])


        #call main function
        main(args['<source>'], args['<mask>'], args['<output>'], src_band, int(args['--msk_band']), msk_value, out_value, args['--meta'])

    #handle invalid options
    except docopt.DocoptExit as e:
        print e.message
